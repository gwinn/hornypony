#!/bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage unicorn server
# Description:       Start, stop, restart unicorn server for a ruby application.
### END INIT INFO

set -e

while getopts c:i:e: option
do
  case "${option}"
  in
    c) COMMAND=${OPTARG};;
    i) INSTANCE=${OPTARG};;
    e) ENVIRONMENT=${OPTARG};;
  esac
done

if [ -z $INSTANCE ]; then
  echo >&2 "Instance name required"
  exit 0
fi

if [ -z $COMMAND ]; then
  echo >&2 "Usage: $0 -i <instance_name> -c <start|stop|restart|upgrade|force-stop|reopen-logs> [-e <environment_name>]"
  exit 0
fi

source /etc/unicorn/$INSTANCE.conf

TIMEOUT=${TIMEOUT-60}
APP_ROOT=$app_root
PID=$APP_ROOT/tmp/pids/unicorn.pid
CMD="cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E $ENVIRONMENT"
AS_USER=$user

set -u

OLD_PIN="$PID.oldbin"

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

case "$COMMAND" in
start)
  if [ -z $ENVIRONMENT ]; then
    echo >&2 "Environment name required" && exit 0
  fi
  sig 0 && echo >&2 "Already running" && exit 0
  run "$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  if [ -z $ENVIRONMENT ]; then
    echo >&2 "Environment name required" && exit 0
  fi
  sig USR2 && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;
upgrade)
  if [ -z $ENVIRONMENT ]; then
    echo >&2 "Environment name required" && exit 0
  fi
  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
  then
    n=$TIMEOUT
    while test -s $OLD_PIN && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 && test -s $OLD_PIN
    then
      echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  run "$CMD"
  ;;
reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 -i <instance_name> -c <start|stop|restart|upgrade|force-stop|reopen-logs> [-e <environment_name>]"
  exit 1
  ;;
esac
